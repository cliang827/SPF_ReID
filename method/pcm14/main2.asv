clear
% close all
clc

addpath(genpath(fullfile([pwd '\method'])));
Initialization2;
Score_Torse = exp(-g2p_dist(:,:,1));
Score_Leg =exp(-g2p_dist(:,:,2));
Score_g2g_torse = exp(-g2g_dist(:,:,1));
Score_g2g_leg = exp(-g2g_dist(:,:,2));
Score = reid_score;
Score_All = Score;
Picture = prbgal_name_tab;

FBData = '.\data\viper\feedback\mmap\';



NumofGallery = 316;
NumofFeedBack = 1; %使用的反馈的数据的对数
NumofProbe = 316;
Part = 1;%使用上半身
T = 0.1;%近邻相似阈值
K = 8;   %聚类类数
a = 0.3; %融合系数

ScoreNS = zeros(316,316);
Score = zeros(316,316);
% ScoreCS = zeros(316,316);
% [Idx1,C1,MIDX1] = Cluster(1,K);
% [Idx2,C2,MIDX2] = Cluster(2,K); 
feedback_info_origin = cell(10, NumofProbe);
repeat_times = 10;
for tst =1:repeat_times
    tic
    for iProbe = 1:NumofProbe
        load([FBData,Picture{iProbe,1},'.mat']);
        O = GetOF(feedback_info,NumofFeedBack,iProbe);
        feedback_info_pcm14{tst, iProbe} = O;
        %     MaxK1 = GetMaxCluster(Idx1,O,1);
        %     MaxK2 = GetMaxCluster(Idx2,O,2);
        parfor iGallery = 1:NumofGallery
        %     MIDX1;
        %     MIDX2;
            O;
            %%计算近邻得分

            for i=1:NumofFeedBack
                if Part==1
                    S_gallery = O.SimilarTorse{i,2};
                    DS_gallery = O.DissimilarTorse{i,2};
                    Score1_S  = Score_g2g_torse(S_gallery,iGallery);
                    Score1_DS  = Score_g2g_torse(DS_gallery,iGallery);
                    S = (Score1_S - Score1_DS)*Idicate(Score1_S,Score1_DS,T);
                    ScoreNS(iGallery,iProbe) = ScoreNS(iGallery,iProbe) + S;

                    S_gallery = O.SimilarLeg{i,2};
                    DS_gallery = O.DissimilarLeg{i,2};
                    Score2_S  = Score_g2g_leg(S_gallery,iGallery);
                    Score2_DS  = Score_g2g_leg(DS_gallery,iGallery);
                    S = (Score2_S - Score2_DS)*Idicate(Score2_S,Score2_DS,T);
                    ScoreNS(iGallery,iProbe) = ScoreNS(iGallery,iProbe) + S;
                end
            end
        end 
        fprintf('the %d, %d,Score has done!\n',tst,iProbe); 
    end
    % Score = Score_All + a.*ScoreCS + (1-a).*ScoreNS;
    Score1 = Score_All + ScoreNS;
    Score = Score + Score1;
    toc
end
Score = Score./repeat_times;
save('Score','Score');
save('feedback_info_pcm14.mat','feedback_info_origin');

%%
N = 316;

groundtruth = repmat(1:316,316,1);
y0  = result_evaluation(Score_All,groundtruth);
y1  = result_evaluation(Score,groundtruth);
% y2  = result_evaluation(Score,groundtruth);
y0 = y0(1:N); auc0 = sum(y0);
y1 = y1(1:N); auc1 = sum(y1);
% y2 = y2(1:N); auc2 = sum(y2);
x = 1:N;

figure
plot(x,y0,'r','LineWidth',0.5);
hold on
plot(x,y1,'b','LineWidth',0.5);
hold on
plot(x,y2,'g','LineWidth',0.5);
axis([0,N,0,1]);
grid on
legend(sprintf('auc0=%.2f', auc0), sprintf('auc1=%.2f', auc1));
title('T =0.1 M =1');


    
    

